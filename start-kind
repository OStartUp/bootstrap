#!/bin/sh
set -o errexit

# desired cluster name; default is "kind"
KIND_CLUSTER_NAME="${KIND_CLUSTER_NAME:-kind}"
KIND_CLUSTER_NAME_PROD="${KIND_CLUSTER_NAME_PROD:-production}"
KUBERNETES_NODE_IMAGE=kindest/node:v1.15.7

# Createn production cluster
cat <<EOF | kind create cluster --name "${KIND_CLUSTER_NAME_PROD}" --image=$KUBERNETES_NODE_IMAGE --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
  - role: worker
  - role: worker
  - role: worker
  - role: worker
EOF

# create a cluster with the local registry enabled in containerd
cat <<EOF | kind create cluster --name "${KIND_CLUSTER_NAME}" --image=$KUBERNETES_NODE_IMAGE --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
  - role: worker
  - role: worker
# containerdConfigPatches: 
# - |-
#   [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry:${reg_port}"]
#     endpoint = ["http://registry:${reg_port}"]
EOF

# # add the registry to /etc/hosts on each node
# ip_fmt='{{.NetworkSettings.IPAddress}}'
# cmd="echo $(docker inspect -f "${ip_fmt}" "${reg_name}") registry >> /etc/hosts"
# for node in $(kind get nodes --name "${KIND_CLUSTER_NAME}"); do
#   docker exec "${node}" sh -c "${cmd}"
# done

kubectl config use-context kind-kind

killall kubectl || true
kubectl apply -f nginx-ingress-controller.yaml
kubectl apply -f docker-service.yaml -n kube-system
sleep 60
kubectl port-forward -n ingress-nginx  svc/ingress-nginx 8080:80 > /dev/null 2>&1 &
kubectl port-forward -n ingress-nginx  svc/ingress-nginx 8443:443 > /dev/null 2>&1  &
kubectl proxy > /dev/null 2>&1 &


